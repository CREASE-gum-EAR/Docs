{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FormationFlight","text":"<p>Open-Source Inter-UAS Positioning &amp; Telemetry for FPV Pilots</p> <p>Quick Start  Download Firmware  Join our Discord </p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#who-is-formationflight-for","title":"Who is FormationFlight for?","text":"<p>FormationFlight runs in tandem with your flight control software (Betaflight, iNav, or Ardupilot). It relays information about UAVs in the area to the flight controller for display on the OSD. FormationFlight uses LoRa or ESPNOW to broadcast position, altitude, speed and aircraft name, and listens for other UAVs so your flight controller's OSD can display this information</p>"},{"location":"faq/#what-relation-does-this-have-to-inav-radar","title":"What relation does this have to iNav Radar?","text":"<p>FormationFlight started as a fork of iNav Radar by OlivierC to add a few hardware targets, but rapidly grew into a substantially different project. It was renamed and detached from iNav Radar in June of 2023. The old project's name (ESP32-INAV-RADAR) quickly became invalid once it ran on ESP8266 and with Ardupilot and Betaflight, so a new name was chosen: FormationFlight</p>"},{"location":"faq/#what-changes-were-made-as-compared-to-inav-radar","title":"What changes were made as compared to iNav Radar?","text":"<p>Many features were added over the development process, but the highlights are:</p> <ul> <li>Increased update rate from 1Hz to 10Hz</li> <li>Support 6 simultaneous users rather than 4</li> <li>Add encryption support for privacy</li> <li>Port codebase to run on both ESP8266 &amp; ESP32</li> <li>Added 2.4GHz LoRa support</li> <li>Added a WiFi configuration and monitoring system</li> <li>Added WiFi OTA firmware updates</li> <li>Added support for the ESP series built-in espnow functionality, which uses the internal WiFi chip.</li> <li>Support directly-attached GPS &amp; MSP GPS injection so F411 boards can be used with FF</li> <li>Significantly rewrote and refactored the code into modules (Display, Config, etc.) for easier maintenance</li> </ul>"},{"location":"faq/#what-do-i-need-to-use-formationflight","title":"What do I need to use FormationFlight?","text":"<p>You'll need a small radio attached to your flight controller that communicates with other FormationFlight users. The preferred hardware choice are 2.4GHz receivers intended for the ExpressLRS project. These receivers are extremely small (10mm x 10mm), lightweight (0.5g), and inexpensive ($10 USD) compared to other hardware choices. They communicate over 2.4GHz LoRa and can achieve ranges of 3-5km easily, with some hardware capable of significantly more.</p>"},{"location":"faq/#i-need-help-where-can-i-find-more-information","title":"I need help, where can I find more information?","text":"<p>Join our friendly Discord server! FormationFlight developers and users hang out in #help-and-support </p> <p>Join our Discord </p>"},{"location":"getting-started/","title":"Getting Started with FormationFlight","text":""},{"location":"getting-started/#connect","title":"Connect","text":"<p>For some boards (ESP dev boards like the Lolin or TTGO series) this can be done with a USB connection. For others like ExpressLRS receivers, you must use an external UART interface, commonly referred to as \"an FTDI\". </p>"},{"location":"getting-started/#connect-boards-with-usb","title":"Connect boards with USB","text":"<p>Flashing dev boards with USB is easy! Just connect your board via USB and continue to the flashing section below</p>"},{"location":"getting-started/#connect-boards-without-usb","title":"Connect boards without USB","text":"<p>To flash boards without built-in USB, you'll need a UART interface. An example of one of these boards is here.</p> <p>Connect your board according to the diagram below.</p> <p></p> <p>Now you'll need to put the board into bootloader mode - this is done by connecting the GPIO0 pin to ground. On ExpressLRS receivers for example, there's a pad marked \"BOOT\". This pad must be connected to ground while power is applied to the board to enter bootloader mode. Once your board is in bootloader mode, continue to the flashing section.</p>"},{"location":"getting-started/#flash","title":"Flash","text":""},{"location":"getting-started/#install-esp-flasher","title":"Install ESP flasher","text":"<p>You can download an easy to use ESP flasher tool from Jason8266's ESP_Flasher repo. This tool makes it easy to install the FormationFlight firmware on your ESP board of choice.</p> <p>Download Flasher </p>"},{"location":"getting-started/#download-pre-built-binaries","title":"Download pre-built binaries","text":"<p>A simple way to install FormationFlight is by downloading pre-built binaries from GitHub Releases. Choose the correct binary file for your board (for example, <code>expresslrs_rx_2400</code> for a 2.4GHz ExpressLRS receiver without PA/LNA like the HappyModel EP1/EP2).</p> <p>Download Firmware </p>"},{"location":"getting-started/#flash-your-board","title":"Flash your board","text":"<p>Configure ESP-Flasher with the serial port of your board, and select the firmware.bin file for your board</p> <p></p>"},{"location":"getting-started/#configure","title":"Configure","text":"<p>FormationFlight is designed to require minimal configuration of its own. Your flight controller software however will need to be configured to talk to FormationFlight</p>"},{"location":"getting-started/#inav","title":"iNav","text":"<p>iNav includes native support for FormationFlight. Follow their documentation on enabling the HUD here and don't forget to enable the crosshair OSD element.</p>"},{"location":"getting-started/#ardupilot","title":"Ardupilot","text":"<p>As of 2023-06, Ardupilot does not yet natively support FormationFlight. However, the FormationFlight development team has an early release fork of Ardupilot which supports FormationFlight, available here. Be warned that this is prerelease software. Assume that it will crash your plane, kick your dog, and set your house on fire. With that in mind, the developers have been flying this modified version for a few months now without issue.</p>"},{"location":"getting-started/#betaflight","title":"Betaflight","text":"<p>As of 2023-06, Betaflight does not yet natively support FormationFlight. However, the FormationFlight development team has an early release fork of Betaflight which supports FormationFlight, available here. Be warned that this is prerelease software. Assume that it will crash your quad, kick your dog, and set your house on fire. With that in mind, the developers have been flying this modified version for a few months now without issue.</p>"},{"location":"getting-started/#ota-updates","title":"OTA Updates","text":"<p>FormationFlight includes an OTA (over-the-air) upgrade system, so future firmware upgrades can be done via WiFi.</p>"},{"location":"wifi/","title":"FormationFlight WiFi","text":"<p>FormationFlight radios run a WiFi network for configuration and monitoring</p> <ul> <li>Name/SSID: <code>iNav Radar-XXXXXX</code> where <code>XXXXXX</code> are the last 6 characters of your ESP's internal unique ID.</li> <li>Password/PSK: <code>inavradar</code></li> <li>IP Address: http://192.168.4.1</li> </ul>"},{"location":"wifi/#api","title":"API","text":"<p>All endpoints on the WiFi interface serve a simple JSON response, and take in form data as POST for mutating responses.</p>"},{"location":"wifi/#endpoints","title":"Endpoints","text":""},{"location":"wifi/#_1","title":"/","text":"/<pre><code>{\n\"target\":\"Lolin D32\",\n\"version\":\"4.0.0\",\n\"heap\":207500,\n\"uptimeMilliseconds\":14941,\n\"name\":\"5C0\",\n\"longName\":\"ADF5C0\",\n\"host\":\"NoFC\"\n}\n</code></pre> <ul> <li><code>target</code>: name of the hardware target running</li> <li><code>version</code>: version number of FormationFlight running</li> <li><code>heap</code>: bytes remaining in the system's heap memory space</li> <li><code>uptimeMilliseconds</code>: milliseconds since system boot</li> <li><code>name</code>: 3-character name advertised to peers</li> <li><code>longName</code>: 6-character autogenerated name unique to this ESP8266/ESP32</li> <li><code>host</code>: short identifier for what FC software is connected - INAV/ARDU/BTFL/NoFC</li> </ul>"},{"location":"wifi/#peermanagerstatus","title":"/peermanager/status","text":"/peermanager/status<pre><code>{\n\"myID\": \"A\",\n\"count\": 1,\n\"countActive\": 1,\n\"peers\": [\n{\n\"id\": \"B\",\n\"name\": \"5C0\",\n\"updated\": 358772,\n\"age\": 44,\n\"lost\": 0,\n\"lat\": 34.015039,\n\"lon\": -118.79132,\n\"latRaw\": 34015039,\n\"lonRaw\": -118791320,\n\"alt\": 60,\n\"groundSpeed\": 0,\n\"groundCourse\": 0,\n\"distance\": 1085.551147,\n\"courseTo\": 358,\n\"relativeAltitude\": -11,\n\"packetsReceived\": 3235\n}\n]\n}\n</code></pre> <ul> <li><code>myID</code>: timeslot index of this radio (A-F)</li> <li><code>count</code>: number of peers we're tracking</li> <li><code>countActive</code>: number of peers we've seen recently</li> <li><code>peers</code>: list of peers</li> <li><code>id</code>: timeslot index of the peer</li> <li><code>name</code>: name of the peer</li> <li><code>updated</code>: millisecond timestamp of last update</li> <li><code>age</code>: milliseconds since last update</li> <li><code>lost</code>: 0 or 2, 2 indicates lost for legacy reasons</li> <li><code>lat</code>: decimal coordinate latitude of the peer</li> <li><code>lon</code>: decimal coordinate longitude of the peer</li> <li><code>latRaw</code>: compressed coordinate latitude of the peer as sent OTA</li> <li><code>lonRaw</code>: compressed coordinate longitude of the peer as sent OTA</li> <li><code>alt</code>: altitude in meters of the peer</li> <li><code>groundSpeed</code>: speed of the peer in km/h</li> <li><code>groundCourse</code>: ground course of the peer in degrees (0 is north)</li> <li><code>distance</code>: calculated distance in meters from us to peer</li> <li><code>courseTo</code>: course we'd have to follow to meet peer</li> <li><code>relativeAltitude</code>: difference in meters between our altitude and the peer's</li> <li><code>packetsReceived</code>: number of packets received on this timeslot</li> </ul>"},{"location":"wifi/#radiomanagerstatus","title":"/radiomanager/status","text":"/radiomanager/status<pre><code>{\n\"radios\": [\n{\n\"status\":\"ESPNOW @ CH1\",\n\"counters\":\"[4919TX/0RX] [0CRC/0SIZE/0VAL]\",\n\"enabled\":true\n},\n{\n\"status\":\"LoRa SX128X @ 2400.00MHz (10dBm)\",\n\"counters\":\"[4919TX/0RX] [0CRC/0SIZE/0VAL]\",\n\"enabled\":true\n}\n]\n}\n</code></pre> <ul> <li><code>radios</code>: list of radios on the system</li> <li><code>status</code>: short radio-specific status string</li> <li><code>counters</code>: number of packets transmitted, received, and rejected for the 3 reasons listed (bad CRC, bad size, failed validation)</li> <li><code>enabled</code>: whether or not the radio is enabled</li> </ul>"},{"location":"wifi/#todomustardtiger-document-remaining-endpoints","title":"TODO(MUSTARDTIGER) Document remaining endpoints","text":""}]}